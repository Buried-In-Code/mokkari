[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {email = "BuriedInCode@tuta.io", name = "BuriedInCode"},
  {email = "bdpepple@gmail.com", name = "Brian Pepple"}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Framework :: Pydantic :: 2",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: BSD",
  "Operating System :: POSIX :: Linux",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Topic :: Internet"
]
dependencies = [
  "eval-type-backport >= 0.1.3; python_version < \"3.10\"",
  "pydantic >= 2.5.3",
  "ratelimit >= 2.2.1",
  "requests >= 2.26.0"
]
description = "Python wrapper for Metron API"
dynamic = ["version"]
keywords = ["comic", "comics", "metadata"]
license = {text = "GPL-3.0-or-later"}
maintainers = [
  {email = "BuriedInCode@tuta.io", name = "BuriedInCode"}
]
name = "mokkari"
readme = "README.md"
requires-python = ">= 3.8"

[project.optional-dependencies]
docs = [
  "mkdocs >= 1.6.0",
  "mkdocs-include-markdown-plugin >= 6.2.1",
  "mkdocs-material >= 9.5.30",
  "mkdocstrings[python] >= 0.25.1"
]
lint = [
  "codespell >= 2.1.0",
  "pyright >= 1.1.232",
  "radon[toml] >= 6.0.1",
  "ruff >= 0.4.9",
  "types-python-dateutil >= 2.8.19",
  "vulture >= 2.3"
]
test = [
  "coverage[toml] >= 7.0",
  "pytest-cov >= 5.0.0",
  "requests-mock >= 1.9.3"
]

[tool.codespell]
builtin = 'clear,rare,code'
check-hidden = true
# Remove 'coverd' when this issue is resolved
# https://github.com/codespell-project/codespell/issues/1212
ignore-words-list = 'thead,ro,jupyter,coverd,searched,ws'
skip = './cache,./dist,./test-results,.git,.mypy_cache,.pytest_cache,.venv*,node_modules,package-lock.json,poetry.lock,run.spec'

[tool.coverage.html]
directory = "test-results/coverage"

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
omit = [
  "*__pycache__*",
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".venv*/*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*"
]
source = ["mokkari"]

[tool.hatch.version]
path = "mokkari/__init__.py"

[tool.isort]
default_section = "THIRDPARTY"
known_first_party = []
known_third_party = [
  "pydantic",
  "pytest",
  "ratelimit",
  "requests",
  "requests_mock",
  "urllib3"
]
line_length = 100
multi_line_output = 3
profile = "black"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/Metron-Project/mokkari/issues"
"Homepage" = "https://github.com/Metron-Project/mokkari"

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".tox",
  ".venv*",
  "cache",
  "dist",
  "package-lock.json",
  "poetry.lock",
  "test-results",
  "typings"
]
pythonPlatform = "All"
pythonVersion = "3.8"
reportImportCycles = true
reportMissingImports = true
useLibraryCodeForTypes = true

[tool.pytest.ini_options]
addopts = """
    --junit-xml=test-results/pytest/results.xml
    -ra
    --strict-config
    --strict-markers
    --cov
    --cov-append
    --cov-report=html
    --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.venv*,__pycache__/*,cache/*,dist/*,node_modules/*,test-results/*,typings/*"

[tool.ruff]
extend-exclude = ["typings"]

[tool.ruff.lint]
extend-ignore = [
  "COM812",
  "COM819",
  "D203",
  "D206",
  "D213",
  "D300",
  "E111",
  "E114",
  "E117",
  "E501",
  "ISC001",
  "ISC002",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "S101",
  # Format ignores
  "W191"
]
extend-select = [
  "A",
  "ARG",
  "B",
  "B9",
  "C",
  "C4",
  "C90",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "I",
  "ICN",
  "INP",
  "ISC",
  "N",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  # "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT"
]
external = ["V101"]
task-tags = ["FIXME", "HACK", "TODO", "XXX", "http"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["A001", "D104"]
"tests/*" = ["PLR2004", "SLF001", "T201", "T203"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.rye]
dev-dependencies = [
  "pre-commit >= 3.5.0",
  "tox >= 4.11.3",
  "tox-rye @ git+https://github.com/bluss/tox-rye"
]

[tool.vulture]
exclude = [
  "*.venv*",
  "*/__pycache__",
  ".git/",
  ".mypy_cache/",
  ".pytest_cache/",
  "dist/",
  "node_modules/",
  "test_results/",
  "typings/"
]
min_confidence = 61
sort_by_size = true
